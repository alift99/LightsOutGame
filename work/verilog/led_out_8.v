/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module led_out_8 (
    input clk,
    input rst,
    input [15:0] board_state,
    input power_on,
    output reg out0,
    output reg out1,
    output reg out2,
    output reg out3
  );
  
  
  
  wire [12-1:0] M_display_encoder_strip0;
  wire [12-1:0] M_display_encoder_strip1;
  wire [12-1:0] M_display_encoder_strip2;
  wire [12-1:0] M_display_encoder_strip3;
  reg [16-1:0] M_display_encoder_state;
  display_encoder_13 display_encoder (
    .state(M_display_encoder_state),
    .strip0(M_display_encoder_strip0),
    .strip1(M_display_encoder_strip1),
    .strip2(M_display_encoder_strip2),
    .strip3(M_display_encoder_strip3)
  );
  
  wire [288-1:0] M_color_adapter0_out;
  reg [12-1:0] M_color_adapter0_state;
  reg [1-1:0] M_color_adapter0_power_on;
  color_adapter_14 color_adapter0 (
    .clk(clk),
    .rst(rst),
    .state(M_color_adapter0_state),
    .power_on(M_color_adapter0_power_on),
    .out(M_color_adapter0_out)
  );
  
  wire [288-1:0] M_color_adapter1_out;
  reg [12-1:0] M_color_adapter1_state;
  reg [1-1:0] M_color_adapter1_power_on;
  color_adapter_14 color_adapter1 (
    .clk(clk),
    .rst(rst),
    .state(M_color_adapter1_state),
    .power_on(M_color_adapter1_power_on),
    .out(M_color_adapter1_out)
  );
  
  wire [288-1:0] M_color_adapter2_out;
  reg [12-1:0] M_color_adapter2_state;
  reg [1-1:0] M_color_adapter2_power_on;
  color_adapter_14 color_adapter2 (
    .clk(clk),
    .rst(rst),
    .state(M_color_adapter2_state),
    .power_on(M_color_adapter2_power_on),
    .out(M_color_adapter2_out)
  );
  
  wire [288-1:0] M_color_adapter3_out;
  reg [12-1:0] M_color_adapter3_state;
  reg [1-1:0] M_color_adapter3_power_on;
  color_adapter_14 color_adapter3 (
    .clk(clk),
    .rst(rst),
    .state(M_color_adapter3_state),
    .power_on(M_color_adapter3_power_on),
    .out(M_color_adapter3_out)
  );
  
  reg [287:0] ledcolor0;
  
  reg [287:0] ledcolor1;
  
  reg [287:0] ledcolor2;
  
  reg [287:0] ledcolor3;
  
  wire [4-1:0] M_display0_pixel;
  wire [1-1:0] M_display0_led;
  reg [1-1:0] M_display0_update;
  reg [96-1:0] M_display0_color;
  display_15 display0 (
    .clk(clk),
    .rst(rst),
    .update(M_display0_update),
    .color(M_display0_color),
    .pixel(M_display0_pixel),
    .led(M_display0_led)
  );
  
  wire [4-1:0] M_display1_pixel;
  wire [1-1:0] M_display1_led;
  reg [1-1:0] M_display1_update;
  reg [96-1:0] M_display1_color;
  display_15 display1 (
    .clk(clk),
    .rst(rst),
    .update(M_display1_update),
    .color(M_display1_color),
    .pixel(M_display1_pixel),
    .led(M_display1_led)
  );
  
  wire [4-1:0] M_display2_pixel;
  wire [1-1:0] M_display2_led;
  reg [1-1:0] M_display2_update;
  reg [96-1:0] M_display2_color;
  display_15 display2 (
    .clk(clk),
    .rst(rst),
    .update(M_display2_update),
    .color(M_display2_color),
    .pixel(M_display2_pixel),
    .led(M_display2_led)
  );
  
  wire [4-1:0] M_display3_pixel;
  wire [1-1:0] M_display3_led;
  reg [1-1:0] M_display3_update;
  reg [96-1:0] M_display3_color;
  display_15 display3 (
    .clk(clk),
    .rst(rst),
    .update(M_display3_update),
    .color(M_display3_color),
    .pixel(M_display3_pixel),
    .led(M_display3_led)
  );
  
  always @* begin
    M_display_encoder_state = board_state;
    M_color_adapter0_state = M_display_encoder_strip0;
    M_color_adapter1_state = M_display_encoder_strip1;
    M_color_adapter2_state = M_display_encoder_strip2;
    M_color_adapter3_state = M_display_encoder_strip3;
    M_color_adapter0_power_on = power_on;
    M_color_adapter1_power_on = power_on;
    M_color_adapter2_power_on = power_on;
    M_color_adapter3_power_on = power_on;
    ledcolor0 = M_color_adapter0_out;
    ledcolor1 = M_color_adapter1_out;
    ledcolor2 = M_color_adapter2_out;
    ledcolor3 = M_color_adapter3_out;
    M_display0_update = 1'h1;
    M_display0_color = ledcolor0[(M_display0_pixel)*24+23-:24];
    M_display1_update = 1'h1;
    M_display1_color = ledcolor1[(M_display1_pixel)*24+23-:24];
    M_display2_update = 1'h1;
    M_display2_color = ledcolor2[(M_display2_pixel)*24+23-:24];
    M_display3_update = 1'h1;
    M_display3_color = ledcolor3[(M_display3_pixel)*24+23-:24];
    out0 = M_display0_led;
    out1 = M_display1_led;
    out2 = M_display2_led;
    out3 = M_display3_led;
  end
endmodule
