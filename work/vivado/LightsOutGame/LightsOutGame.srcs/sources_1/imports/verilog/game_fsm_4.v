/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_fsm_4 (
    input clk,
    input rst,
    input [15:0] button_pressed,
    input reset_btn_pressed,
    input difficulty_btn_pressed,
    output reg we,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg asel,
    output reg bsel,
    output reg [5:0] alufn,
    input [15:0] initial_board_index,
    input [15:0] move_count_1,
    input [15:0] difficulty_level,
    input [15:0] hidden_turns_left,
    input [15:0] game_over
  );
  
  
  
  
  localparam INITIALIZE_BOARD_STATE_game_state = 5'd0;
  localparam AWAIT_INPUT_game_state = 5'd1;
  localparam INCREMENT_MOVE_COUNT_1_game_state = 5'd2;
  localparam SET_MOVE_COUNT_1_TO_ZERO_game_state = 5'd3;
  localparam INCREMENT_MOVE_COUNT_2_game_state = 5'd4;
  localparam ASSIGN_HIDDEN_TURNS_game_state = 5'd5;
  localparam DECREMENT_HIDDEN_TURNS_game_state = 5'd6;
  localparam CHECK_BOARD_game_state = 5'd7;
  localparam CHECK_FOR_GAME_OVER_game_state = 5'd8;
  localparam RESET_DIFFICULTY_game_state = 5'd9;
  localparam INCREMENT_DIFFICULTY_game_state = 5'd10;
  localparam RESET_INITIAL_BOARD_STATE_INDEX_game_state = 5'd11;
  localparam INCREMENT_INITIAL_BOARD_STATE_INDEX_game_state = 5'd12;
  localparam ASSIGN_NEW_BOARD_STATE_game_state = 5'd13;
  localparam RESET_MOVE_COUNT_1_game_state = 5'd14;
  localparam RESET_MOVE_COUNT_2_game_state = 5'd15;
  localparam SET_HIDDEN_TURNS_TO_ZERO_game_state = 5'd16;
  localparam GAME_OVER_game_state = 5'd17;
  
  reg [4:0] M_game_state_d, M_game_state_q = INITIALIZE_BOARD_STATE_game_state;
  
  always @* begin
    M_game_state_d = M_game_state_q;
    
    we = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    rc = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    alufn = 6'h00;
    
    case (M_game_state_q)
      INITIALIZE_BOARD_STATE_game_state: begin
        we = 1'h1;
        ra = 1'h0;
        rb = 3'h7;
        rc = 1'h0;
        asel = 1'h1;
        bsel = 1'h0;
        alufn = 6'h00;
        M_game_state_d = AWAIT_INPUT_game_state;
      end
      AWAIT_INPUT_game_state: begin
        if (button_pressed != 16'h0000) begin
          we = 1'h1;
          ra = 1'h0;
          rb = 1'h0;
          rc = 1'h0;
          asel = 1'h0;
          bsel = 1'h1;
          alufn = 6'h20;
          if (move_count_1 == 4'h9) begin
            M_game_state_d = SET_MOVE_COUNT_1_TO_ZERO_game_state;
          end else begin
            M_game_state_d = INCREMENT_MOVE_COUNT_1_game_state;
          end
        end
        if (reset_btn_pressed) begin
          if (initial_board_index == 2'h3) begin
            M_game_state_d = RESET_INITIAL_BOARD_STATE_INDEX_game_state;
          end else begin
            M_game_state_d = INCREMENT_INITIAL_BOARD_STATE_INDEX_game_state;
          end
        end
        if (difficulty_btn_pressed) begin
          if (difficulty_level == 2'h2) begin
            M_game_state_d = RESET_DIFFICULTY_game_state;
          end else begin
            M_game_state_d = INCREMENT_DIFFICULTY_game_state;
          end
        end
      end
      INCREMENT_MOVE_COUNT_1_game_state: begin
        we = 1'h1;
        ra = 2'h2;
        rb = 4'h8;
        rc = 2'h2;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h00;
        if (hidden_turns_left == 1'h0) begin
          M_game_state_d = ASSIGN_HIDDEN_TURNS_game_state;
        end else begin
          M_game_state_d = DECREMENT_HIDDEN_TURNS_game_state;
        end
      end
      SET_MOVE_COUNT_1_TO_ZERO_game_state: begin
        we = 1'h1;
        ra = 2'h2;
        rb = 3'h7;
        rc = 2'h2;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h35;
        M_game_state_d = INCREMENT_MOVE_COUNT_2_game_state;
      end
      INCREMENT_MOVE_COUNT_2_game_state: begin
        we = 1'h1;
        ra = 2'h3;
        rb = 4'h8;
        rc = 2'h3;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h00;
        if (hidden_turns_left == 1'h0) begin
          M_game_state_d = ASSIGN_HIDDEN_TURNS_game_state;
        end else begin
          M_game_state_d = DECREMENT_HIDDEN_TURNS_game_state;
        end
      end
      ASSIGN_HIDDEN_TURNS_game_state: begin
        we = 1'h1;
        ra = 3'h4;
        rb = 3'h7;
        rc = 3'h5;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h00;
        M_game_state_d = CHECK_BOARD_game_state;
      end
      DECREMENT_HIDDEN_TURNS_game_state: begin
        we = 1'h1;
        ra = 3'h5;
        rb = 4'h8;
        rc = 3'h5;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h01;
        M_game_state_d = CHECK_BOARD_game_state;
      end
      CHECK_BOARD_game_state: begin
        we = 1'h1;
        ra = 1'h0;
        rb = 4'h9;
        rc = 3'h6;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h33;
        M_game_state_d = CHECK_FOR_GAME_OVER_game_state;
      end
      CHECK_FOR_GAME_OVER_game_state: begin
        if (game_over) begin
          M_game_state_d = GAME_OVER_game_state;
        end else begin
          M_game_state_d = AWAIT_INPUT_game_state;
        end
      end
      RESET_DIFFICULTY_game_state: begin
        we = 1'h1;
        ra = 3'h4;
        rb = 3'h7;
        rc = 3'h4;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h35;
        M_game_state_d = AWAIT_INPUT_game_state;
      end
      INCREMENT_DIFFICULTY_game_state: begin
        we = 1'h1;
        ra = 3'h4;
        rb = 4'h8;
        rc = 3'h4;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h00;
        M_game_state_d = AWAIT_INPUT_game_state;
      end
      INCREMENT_INITIAL_BOARD_STATE_INDEX_game_state: begin
        we = 1'h1;
        ra = 1'h1;
        rb = 4'h8;
        rc = 1'h1;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h00;
        M_game_state_d = ASSIGN_NEW_BOARD_STATE_game_state;
      end
      RESET_INITIAL_BOARD_STATE_INDEX_game_state: begin
        we = 1'h1;
        ra = 1'h1;
        rb = 3'h7;
        rc = 1'h1;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h35;
        M_game_state_d = ASSIGN_NEW_BOARD_STATE_game_state;
      end
      ASSIGN_NEW_BOARD_STATE_game_state: begin
        we = 1'h1;
        ra = 1'h0;
        rb = 3'h7;
        rc = 1'h0;
        asel = 1'h1;
        bsel = 1'h0;
        alufn = 6'h00;
        M_game_state_d = RESET_MOVE_COUNT_1_game_state;
      end
      RESET_MOVE_COUNT_1_game_state: begin
        we = 1'h1;
        ra = 2'h2;
        rb = 3'h7;
        rc = 2'h2;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h35;
        M_game_state_d = RESET_MOVE_COUNT_2_game_state;
      end
      RESET_MOVE_COUNT_2_game_state: begin
        we = 1'h1;
        ra = 2'h3;
        rb = 3'h7;
        rc = 2'h3;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h35;
        M_game_state_d = SET_HIDDEN_TURNS_TO_ZERO_game_state;
      end
      SET_HIDDEN_TURNS_TO_ZERO_game_state: begin
        we = 1'h1;
        ra = 3'h5;
        rb = 3'h7;
        rc = 3'h5;
        asel = 1'h0;
        bsel = 1'h0;
        alufn = 6'h35;
        M_game_state_d = AWAIT_INPUT_game_state;
      end
      GAME_OVER_game_state: begin
        if (reset_btn_pressed) begin
          if (initial_board_index == 2'h3) begin
            M_game_state_d = RESET_INITIAL_BOARD_STATE_INDEX_game_state;
          end else begin
            M_game_state_d = INCREMENT_INITIAL_BOARD_STATE_INDEX_game_state;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_state_q <= 1'h0;
    end else begin
      M_game_state_q <= M_game_state_d;
    end
  end
  
endmodule
