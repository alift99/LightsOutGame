module alu (
  input a[16],
  input b[16],
  input alufn[6],
  output out[16],
  output zvn[3]
)
{

  adder adderModule;
  boolean booleanModule;
  compare compareModule;
  state_inverter inverterModule;

  sig z;
  sig v;
  sig n;
  sig tempOut[16];

  always 
  {
	    //passes in alufn signal, a and b into adder
    	adderModule.alufn = alufn;
  	  adderModule.a = a;
  	  adderModule.b = b;
  
  	  //stores output of adder to 3 variables: z, v and n. 
  	  z = adderModule.z;
  	  v = adderModule.v;
  	  n = adderModule.n;
  
    	//outputs z,v and n
    	zvn[0] = z;
    	zvn[1] = v;
    	zvn[2] = n;  
  	
    	//similarly, passing in the values for compare and boolean
    	compareModule.alufn = alufn;
    	compareModule.z = z;
    	compareModule.v = v;
    	compareModule.n = n;
    		
    	booleanModule.alufn = alufn;
    	booleanModule.a = a;
    	booleanModule.b = b; 
    
    inverterModule.state = a;
    inverterModule.button_pressed = b;
    
    	case(alufn[5:4])
    {		
		    b00: 
        tempOut = adderModule.out;
		    b01: 
        tempOut = booleanModule.out;
		    b10: 
        tempOut = inverterModule.out;
		    b11: 
        tempOut = compareModule.out;
		    default: 
        tempOut = 16b0;		
		  }
    
     out = tempOut;
    
	  }
}